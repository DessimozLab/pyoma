#!/usr/bin/env python

import time
import pyoma.browser.convert
import os
import logging
import tables

logger = logging.getLogger("update-hog")


def update_hogs(
    h5_filename, tree, orthoxml_file=None, orthoxml_dir=None, release_char=None
):
    exporter = pyoma.browser.convert.DarwinExporter(h5_filename, mode="append")
    for node in ("/HogLevel", "/OrthoXML", "/HOGAnnotations"):
        try:
            exporter.h5.remove_node(node, recursive=True)
        except tables.NoSuchNodeError:
            pass

    os.environ["DARWIN_NETWORK_SCRATCH_PATH"] = os.path.join(
        os.getenv("TMPDIR", "/tmp"), "pyoma-update"
    )
    exporter.add_hogs(
        hog_path=orthoxml_dir,
        hog_file=orthoxml_file,
        tree_filename=tree,
        release=release_char,
    )
    exporter.add_hog_domain_prevalence()

    hogTab = exporter.h5.get_node("/HogLevel")
    pyoma.browser.convert.create_index_for_columns(
        hogTab, "Fam", "ID", "Level", "NrMemberGenes", "CompletenessScore", "IsRoot"
    )
    pyoma.browser.convert.create_and_store_fast_famhoglevel_lookup(
        exporter.h5, hogTab, "/HogLevel_fam_lookup"
    )

    orthoxmlTab = exporter.h5.get_node("/OrthoXML/Index")
    pyoma.browser.convert.create_index_for_columns(orthoxmlTab, "Fam")

    entry_tab = exporter.h5.get_node("/Protein/Entries")
    pyoma.browser.convert.create_index_for_columns(entry_tab, "OmaHOG")

    dom2hog_tab = exporter.h5.get_node("/HOGAnnotations/Domains")
    pyoma.browser.convert.create_index_for_columns(dom2hog_tab, "DomainId")
    domprev_tab = exporter.h5.get_node("/HOGAnnotations/DomainArchPrevalence")
    pyoma.browser.convert.create_index_for_columns(domprev_tab, "Fam")

    exporter.close()


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description="Update hog data of an HDF5 file")
    parser.add_argument("hdf5", help="Path to the hdf5 database")
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument("--orthoxml-file", help="(updated) input orthoxml file")
    group.add_argument(
        "--orthoxml-dir",
        default=None,
        help="directory containing individual orthoxml files, one per hog",
    )
    parser.add_argument(
        "--release",
        "-r",
        help="A single character indicating the " "release in the HOG ids",
    )
    parser.add_argument("taxonomy", help="Taxonomy file in newick format")
    conf = parser.parse_args()
    logging.basicConfig(level=logging.INFO)

    update_hogs(
        conf.hdf5,
        conf.taxonomy,
        conf.orthoxml_file,
        conf.orthoxml_dir,
        release_char=conf.release,
    )
